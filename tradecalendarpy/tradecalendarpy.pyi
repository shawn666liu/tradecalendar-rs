# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import datetime
import typing

class TradeCalendar:
    def reload(self, db_conn,query,csv_file = ...,start_date = ...) -> None:
        r"""
        连接字符串：   
        
        postgres://user:passwd@localhost:5432/dbname  
        
        mysql://user:passwd@localhost:3306/dbname   
        
        clickhouse://user:passwd@localhost:8123/dbname
        
        odbc: Driver={PostgreSQL Unicode};Server=localhost;PORT=5432;UID=user;PWD=passwd;Database=dbname
        
        query: 5 fields required, keep the order of fields,
        
        select date,morning,trading,night,next from your_table where date>='yyyy-mm-dd' order by date
        """
        ...

    def is_trading_day(self, date:datetime.date) -> bool:
        ...

    def get_next_trading_day(self, date,num = ...) -> datetime.date:
        ...

    def get_prev_trading_day(self, date,num = ...) -> datetime.date:
        ...

    def get_trading_days_count(self, start_dt:datetime.date, end_dt:datetime.date) -> int:
        r"""
        计算从start_date(含)到end_date(含)之间交易日的个数, 超出范围的部分将被忽略
        """
        ...

    def get_trading_days_list(self, start_dt:datetime.date, end_dt:datetime.date) -> list[datetime.date]:
        r"""
        start_date(含)到end_date(含)之间交易日
        """
        ...

    def get_date_detail(self, theday:datetime.date) -> typing.Optional[dict]:
        r"""
        获取某个日期的交易日详细信息
        date, morning, trading, night, next
        """
        ...

    def trading_day_from_datetime(self, input:datetime.datetime, for_next:bool, is_finance_item:bool) -> datetime.date:
        r"""
        根据输入时间获取交易日,
        
        如果输入的时间点是非交易时段, 则利用method确定是取前一个交易日, 还是后一交易日,
        
        交易时段内的时间点不受影响
        
        is_finance_item, 金融期货的下午收盘时间点为15:15, 其他商品15:00
        """
        ...

    def max_date(self) -> datetime.date:
        ...

    def min_date(self) -> datetime.date:
        ...

    def reset(self, start_time = ...) -> None:
        ...

    def is_trading(self) -> bool:
        ...

    def time_changed(self, datetime:datetime.datetime, fail_safe:bool) -> tuple[datetime.date, datetime.date, datetime.date, datetime.date, typing.Optional[str]]:
        r"""
        时间改变，重新计算内部状态
        
        fail_safe: 在失败时(主要是calendar没有及时更新的情况)尝试补救?
        
        返回值: tuple(上个交易日, 当前交易日, 上个自然日, 当前自然日, Option<Error_Message>)
        """
        ...

    def set_config(self, tday_shift:datetime.time, night_begin:datetime.time, night_end:datetime.time, day_begin:datetime.time, day_end:datetime.time) -> None:
        r"""
        重置日期边界的一些配置,
        调用此函数之后，可以调用time_changed()刷新状态
        
        tday_shift: 交易日切换的时间点，缺省值 19:30:00, 影响trading_day()/prev_tday()/next_tday()
        
        以下4个配置影响 is_trading()
        
        night_begin: 缺省值 20:30:00
        
        night_end: 缺省值 2:31:00
        
        day_begin: 缺省值 8:30:00
        
        day_end: 缺省值 15:30:00
        """
        ...

    def get_config(self) -> tuple[datetime.time, datetime.time, datetime.time, datetime.time, datetime.time]:
        r"""
        返回值参看set_config
        """
        ...

    def prev_tday(self) -> datetime.date:
        r"""
        前一交易日
        """
        ...

    def current_tday(self) -> datetime.date:
        r"""
        获取当前交易日
        """
        ...

    def next_tday(self) -> datetime.date:
        r"""
        后一交易日
        """
        ...


def get_buildin_calendar(start_date = ...) -> TradeCalendar:
    ...

def get_calendar(db_conn,query,csv_file = ...,start_date = ...) -> TradeCalendar:
    r"""
    连接字符串：   
    
    postgres://user:passwd@localhost:5432/dbname  
    
    mysql://user:passwd@localhost:3306/dbname   
    
    clickhouse://user:passwd@localhost:8123/dbname
    
    odbc: Driver={PostgreSQL Unicode};Server=localhost;PORT=5432;UID=user;PWD=passwd;Database=dbname
    
    query: 5 fields required, keep the order of fields,
    
    select date,morning,trading,night,next from your_table where date>='yyyy-mm-dd' order by date
    """
    ...

def get_csv_calendar(csv_file,start_date = ...) -> TradeCalendar:
    ...

